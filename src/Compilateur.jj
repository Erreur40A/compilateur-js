PARSER_BEGIN(Compilateur)

import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Compilateur {
    public static void main(String[] args) {
        try {
            FileReader f = new FileReader(args[0]);
            BufferedReader reader = new BufferedReader(f);
            Compilateur parseur = new Compilateur(reader);
            parseur.mainNT();
            System.out.println("C'est bien une expression arithmetique");
        } catch (TokenMgrError e) {
            System.out.println("Token Ceci n'est pas une expression arithméthique");
        } catch (ParseException e){
            System.out.println("Parser Ceci n'est pas une expression arithméthique");
        }catch (IOException e){
            e.printStackTrace();
        }
    }
}
PARSER_END(Compilateur)

SKIP :
{ " " | "\t" | "\n" }

TOKEN :
{ < NOMBRE: (["0"-"9"]) (["0"-"9"])* (["."])? (["0"-"9"])* >
    | <EOL: ";" >
}

void mainNT () :
{}
{ expression() <EOL> }

void expression () :
{}
{ terme() (
      "+" terme()
    | "-" terme()
    )*
}
void terme () :
{}
{ facteur() (
      "*" facteur()
    | "/" facteur()
    )*
}

void facteur () :
{}
{ "(" expression() ")"
    | "-" facteur()
    | <NOMBRE>
}