options {
    static = false;
}

PARSER_BEGIN(Compilateur)

import java.io.*;
import java.util.ArrayList;
import AST.*;

public class Compilateur {
    public static void main(String[] args){
        try {
            BufferedReader br = new BufferedReader(new FileReader(args[0]));
            Compilateur parseur = new Compilateur(br);

            ExpressionA eA=parseur.mainNT();
            System.out.println(eA);

        } catch (TokenMgrError e) {
            System.out.println("Token Ceci n'est pas une expression arithm\u00e9thique");
        } catch (ParseException e){
            System.out.println("Parseur Ceci n'est pas une expression arithm\u00e9thique");
        } catch (IOException e){
            e.printStackTrace();
        }
    }
}
PARSER_END(Compilateur)

SKIP :
{ " " | "\t" | "\n" | "//" : FinComMonoLn | "/*" : FinComMultiLn}

<FinComMonoLn> SKIP :
{
    "\n" : DEFAULT
}

<FinComMultiLn> SKIP :
{
    "*/" : DEFAULT
}

<FinComMonoLn> MORE :
{
  <~[]>
}

<FinComMultiLn> MORE :
{
  <~[]>
}

TOKEN :
{ < NOMBRE: (["0"-"9"])+ ("." (["0"-"9"])*)? >
  //Priorit√© boolean: +,-,*,/ prioritaire sur ==, <=
  | <BOOLEAN: "True" | "False" | "true" | "false"> 
  | <EGALITE: "==" >
  | <DIFFERENT: "!=" >
  | <PPETITOUE: "<=" >
  | <PGRANDOUE: ">=" >
  | <ET: "&&" >
  | <NAN: "NaN" >
  | <NOMBRESCI: <NOMBRE> "e" ("-")? (["0"-"9"])+ >
  | <IMPORT: "import" >
  | <IDENTIFIANT: (["a"-"z"] | ["A"-"Z"] | "$" | "_") (["a"-"z"] | ["A"-"Z"] | ["1"-"9"] | "$" | "_")* >

}

ExpressionA mainNT () :
{
    ExpressionA e;
}
{ 
    (e=program()) {return e;}
}

ExpressionA program () :
{
    ExpressionA commande1;
    ExpressionA commande2;
    Programe prog = new Programe();
}
{
    <EOF> {return null;}
    |(commande1=command() {prog.add(commande1);} 
     (commande2=command() {prog.add(commande2);}
    )* {return prog;})
}

ExpressionA command () :
{
    ExpressionA e;
    Token t;
}
{
    (e=expression()) ";" {return e;}
    |<IMPORT> t=<IDENTIFIANT> ";" {return new Import(t.image);}
}



ExpressionA expression () :
{
    ExpressionA gauche;
    ExpressionA droite;
    ExpressionA res;
}
{ (gauche=terme() {res=gauche;}
    ("+" (droite=terme()) {gauche=new Plus(gauche, droite); res=gauche;}
    | "-" (droite=terme()) {gauche=new Moins(gauche, droite); res=gauche;}
    |<EGALITE> (droite=terme()) {gauche=new Egalite(gauche, droite); res=gauche;}
    |<PPETITOUE> (droite=terme()) {gauche=new PPetitE(gauche, droite); res=gauche;}
    |<PGRANDOUE> (droite=terme()) {gauche=new PGrandE(gauche, droite); res=gauche;}
    |<DIFFERENT> (droite=terme()) {gauche=new NotEq(gauche, droite); res=gauche;}
    | "<" (droite=terme()) {gauche=new PPetit(gauche, droite); res=gauche;}
    | ">" (droite=terme()) {gauche=new PGrand(gauche, droite); res=gauche;}
    | <ET> (droite=terme()) {gauche=new Et(gauche, droite); res=gauche;}
    )* {return res;})
}

ExpressionA terme () :
{
    ExpressionA gauche;
    ExpressionA droite;
    ExpressionA res;
}
{ gauche=facteur() {res=gauche;}
    ("*" (droite=facteur()) {gauche=new Mult(gauche, droite); res=gauche;}
    |"/" (droite=facteur()) {gauche=new Div(gauche, droite); res=gauche;}
    )* {return res;}
}

ExpressionA facteur () :
{
    ExpressionA e;
    Token t;
}
{ "(" (e=expression()) ")" {return e;}
    | "-" (e=facteur()) {return new Neg(e);}
    | "!" (e=facteur()) {return new Nega(e);}
    | t=<NOMBRE> {return new Num(Float.parseFloat(t.image));}
    | t=<NOMBRESCI> {return new Num(Float.parseFloat(t.image));}
    | t=<NAN> {return new Num(Float.parseFloat(t.image));}
    | t=<BOOLEAN> {return new Bool(Boolean.parseBoolean(t.image));}
}