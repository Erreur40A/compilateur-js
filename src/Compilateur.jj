PARSER_BEGIN(Compilateur)

import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Compilateur {
    public static void main(String[] args) {
        try {
            FileReader f = new FileReader(args[0]);
            BufferedReader reader = new BufferedReader(f);
            Compilateur parseur = new Compilateur(reader);
            float i=parseur.mainNT();
            System.out.println(i);
        } catch (TokenMgrError e) {
            System.out.println("Token Ceci n'est pas une expression arithméthique");
        } catch (ParseException e){
            System.out.println("Ceci n'est pas une expression arithméthique");
        } catch (IOException e) {
            System.out.println("IOException");
        }
    }
}
PARSER_END(Compilateur)

SKIP :
{ " " | "\t" | "\n" }

TOKEN :
{ < NOMBRE: (["0"-"9"]) (["0"-"9"])* (["."])? (["0"-"9"])* >
    | <EOL: ";" >
}

float mainNT () :
{
    float e;
}
{ (e=expression()) <EOL> {return e;}}

float expression () :
{
    float e;
    float res;
}
{ e=terme() {res=e;} 
    (  "+" (e=terme()) {res=res+e;}
     | "-" (e=terme()) {res=res-e;}
    )* {return res;}
}
float terme () :
{
    float e;
    float res;
}
{ e=facteur() {res=e;}
    (  "*" (e=facteur()) {res=res*e;}
      |"/" (e=facteur()) {res=res/e;}
    )*  {return res;}
}

float facteur () :
{
    float e;
    Token t;
}
{ "(" (e=expression()) ")" {return e;}
    | "-" (e=facteur()) {return (-e);}
    | t=<NOMBRE> {return Float.parseFloat(t.image);}
}