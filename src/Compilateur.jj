PARSER_BEGIN(Compilateur)


public class Compilateur {
    public static void main(String[] args) {
        try {
            Compilateur parseur = new Compilateur(System.in);
            parseur.mainNT();
            System.out.println("Ceci est une expression reconnue");
        } catch (TokenMgrError e) {
            System.out.println("Token Ceci n'est pas une expression reconnue");
            //e.printStackTrace();
        } catch (ParseException e){
            System.out.println("Parseur Ceci n'est pas une expression reconnue");
            //e.printStackTrace();
        }
    }
}
PARSER_END(Compilateur)

SKIP :
{ " " | "\t" | "\n" | "//" : FinComMonoLn | "/*" : FinComMultiLn}

<FinComMonoLn> SKIP :
{
    "\n" : DEFAULT
}

<FinComMultiLn> SKIP :
{
    "*/" : DEFAULT
}

<FinComMonoLn> MORE :
{
  <~[]>
}

<FinComMultiLn> MORE :
{
  <~[]>
}

TOKEN :
{ < NOMBRE: (["0"-"9"])+ ("." (["0"-"9"])*)? >
  | <EOL: ";" >
  //Priorit√© boolean: +,-,*,/ prioritaire sur ==, <=
  | <BOOLEAN: "True" | "False" > 
  | <EGALITE: "==" >
  | <PPETITOUE: "<=" >
  | <PGRANDOUE: ">=" >
  | <NAN: "NaN" >
  | <NOMBRESCI: <NOMBRE> "e" ("-")? (["0"-"9"])+ >
  | <COMMANDE: "import" >
  | <IDENTIFIANT: (["a"-"z"] | ["A"-"Z"] | "$" | "_") (["a"-"z"] | ["A"-"Z"] | ["1"-"9"] | "$" | "_")* >
}

void mainNT () :
{}
{ expression() <EOL> }

void expression () :
{}
{ (terme()
    ("+" terme()
    | "-" terme()
    |<EGALITE> terme()
    |<PPETITOUE> terme()
    |<PGRANDOUE> terme()
    | "!" terme()
    | "<" terme()
    | ">" terme()
    )*)
  |importer()
}

void terme () :
{}
{ facteur()
    ("*" facteur()
    |"/" facteur()
    )*
}

void facteur () :
{}
{   "(" expression() ")"
    |"-" facteur()
    |(<NOMBRE> | <NOMBRESCI> | <NAN>)
    |<BOOLEAN>
}

void importer () :
{}
{
    <COMMANDE> <IDENTIFIANT> ".jsm"
}