PARSER_BEGIN(Compilateur)

import AST.*;

public class Compilateur {
    public static void main(String[] args) {
        try {
            Compilateur parseur = new Compilateur(System.in);
            ExpressionA eA=parseur.mainNT();
            System.out.println(eA.toAssembly());
        } catch (TokenMgrError e) {
            System.out.println("Ceci n'est pas une expression arithméthique");
        } catch (ParseException e){
            System.out.println("Ceci n'est pas une expression arithméthique");
        }
    }
}
PARSER_END(Compilateur)

SKIP :
{ " " | "\t" | "\n"}

TOKEN :
{ < NOMBRE: ["1"-"9"] (["0"-"9"])* >
    | <EOL: ";" >
}

ExpressionA mainNT () :
{
    ExpressionA e;
}
{ (e=expression()) <EOL> {return e;}}

ExpressionA expression () :
{
    ExpressionA gauche;
    ExpressionA droite;
    ExpressionA res;
}
{ gauche=terme() {res=gauche;}
    ("+" (droite=terme()) {res=new Plus(gauche, droite);}
    | "-" (droite=terme()) {res=new Moins(gauche, droite);}
    )* {return res;}
}

ExpressionA terme () :
{
    ExpressionA gauche;
    ExpressionA droite;
    ExpressionA res;
}
{ gauche=facteur() {res=gauche;}
    ("*" (droite=facteur()) {res=new Mult(gauche, droite);}
    )* {return res;}
}

ExpressionA facteur () :
{
    ExpressionA e;
    Token t;
}
{ "(" (e=expression()) ")" {return e;}
    | "-" (e=facteur()) {return new Neg(e);}
    | t=<NOMBRE> {return new Num(Integer.parseInt(t.image));}
}