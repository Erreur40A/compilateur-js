PARSER_BEGIN(Compilateur)

import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import AST.*;

public class Compilateur {
    public static void main(String[] args) {
        try {
            FileReader f = new FileReader(args[0]);
            BufferedReader reader = new BufferedReader(f);
            Compilateur parseur = new Compilateur(reader);
            ExpressionA eA=parseur.mainNT();
            System.out.println(eA);
        } catch (TokenMgrError e) {
            System.out.println("Token Ceci n'est pas une expression arithméthique");
        } catch (ParseException e){
            System.out.println("Parser Ceci n'est pas une expression arithméthique");
        }catch (IOException e){
            e.printStackTrace();
        }
    }
}
PARSER_END(Compilateur)

SKIP :
{ " " | "\t" | "\n" }

TOKEN :
{ < NOMBRE: (["0"-"9"]) (["0"-"9"])* (["."])? (["0"-"9"])* >
    | <EOL: ";" >
}

ExpressionA mainNT () :
{
    ExpressionA e;
}
{ (e=expression()) <EOL> {return e;}}

ExpressionA expression () :
{
    ExpressionA gauche;
    ExpressionA droite;
    ExpressionA res;
}
{ gauche=terme() {res=gauche;}
    ("+" (droite=terme()) {res=new Plus(gauche, droite);}
    | "-" (droite=terme()) {res=new Moins(gauche, droite);}
    )* {return res;}
}

ExpressionA terme () :
{
    ExpressionA gauche;
    ExpressionA droite;
    ExpressionA res;
}
{ gauche=facteur() {res=gauche;}
    ("*" (droite=facteur()) {res=new Mult(gauche, droite);}
    | "/" (droite=facteur()) {res=new Div(gauche, droite);}
    )* {return res;}
}

ExpressionA facteur () :
{
    ExpressionA e;
    Token t;
}
{ "(" (e=expression()) ")" {return e;}
    | "-" (e=facteur()) {return new Neg(e);}
    | t=<NOMBRE> {return new Num(Integer.parseInt(t.image));}
}