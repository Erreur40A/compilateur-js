PARSER_BEGIN(Compilateur)

import java.io.*;
import AST.*;

public class Compilateur {
    public static void main(String[] args){
        if(args.length != 1){
            throw new IllegalArgumentException("Il faut obligatoirement UN FICHIER en argument");
        }

        try {
            BufferedReader br = new BufferedReader(new FileReader(args[0]));
            String pathJSM = createFile(args[0]);
            BufferedWriter bw = new BufferedWriter(new FileWriter(pathJSM));

            Compilateur parseur = new Compilateur(br);

            ExpressionA eA;
            eA = parseur.mainNT();
            
            if(eA!=null)
                bw.write(eA.toAssembly());

            bw.close();

        } catch (TokenMgrError e) {
            System.out.println("Token Ceci n'est pas une expression arithm\u00e9thique");
        } catch (ParseException e){
            System.out.println("Parseur Ceci n'est pas une expression arithm\u00e9thique");
        } catch (IOException e){
            e.printStackTrace();
        }
    }


    public static String createFile(String path){
        String pathJSM = path + ".jsm";
        File jsm = new File(pathJSM);

        if(!jsm.exists()){
            try {
                jsm.createNewFile();
            } catch (IOException e) {
                return jsm.getPath();
            }
        }

        return jsm.getPath();
    }
}

PARSER_END(Compilateur)

SKIP :
{ " " | "\t" | "\n" | "//" : FinComMonoLn | "/*" : FinComMultiLn}

<FinComMonoLn> SKIP :
{
    "\n" : DEFAULT
}

<FinComMultiLn> SKIP :
{
    "*/" : DEFAULT
}

<FinComMonoLn> MORE :
{
  <~[]>
}

<FinComMultiLn> MORE :
{
  <~[]>
}

TOKEN :
{ < NOMBRE: (["0"-"9"])+ ("." (["0"-"9"])*)? >
  //Priorit√© boolean: +,-,*,/ prioritaire sur ==, <=
  | <EOL: "\n\n">
  | <BOOLEAN: "True" | "False" | "true" | "false"> 
  | <EGALITE: "==" >
  | <DIFFERENT: "!=" >
  | <PPETITOUE: "<=" >
  | <PGRANDOUE: ">=" >
  | <ET: "&&" >
  | <NAN: "NaN" >
  | <NOMBRESCI: <NOMBRE> "e" ("-")? (["0"-"9"])+ >
  | <IMPORT: "import" >
  | <IF: "if" >
  | <ELSE: "else" >
  | <WHILE: "while" >
  | <FUNCTION: "function" >
  | <RETURN: "return" >
  | <IDENTIFIANT: (["a"-"z"] | ["A"-"Z"] | "$" | "_") (["a"-"z"] | ["A"-"Z"] | ["1"-"9"] | "$" | "_")* >
}

ExpressionA mainNT () :
{
    ExpressionA e;
}
{ 
    (e=program()) {return e;}
}

ExpressionA program () :
{
    ExpressionA commande1;
    ExpressionA commande2;
    Programe prog = new Programe();
}
{
    <EOF> {return null;}
    |(commande1=command() {prog.add(commande1);} 
     (commande2=command() {prog.add(commande2);}
    )* {return prog;})
}

ExpressionA command () :
{
    ExpressionA e1;
    ExpressionA e2;
    ExpressionA e3;
    Token t;
}
{
    (e1=expression()) ";" {return e1;}
    |<IMPORT> t=<IDENTIFIANT> ";" {return new Import(t.image);}
    |";"
    |"{" e1=program() "}" {return e1;}
    |<IF> "(" (e1=expression()) ")" (e2=command()) <ELSE> (e3=command()) {return new IfThenElse(e1, e2, e3);}
    |<WHILE> "(" (e1=expression()) ")" (e2=command()) {return new While(e1, e2);}
    /*|<FUNCTION> (t=<IDENTIFIANT>) "(" delc_args() ")" "{" program() "}"
    |<RETURN> expression() ";" {}*/
}

/*
ExpressionA delc_args() :
{}
{
    <IDENTIFIANT> ( "," <IDENTIFIANT> )*
}
*/

ExpressionA expression () :
{
    ExpressionA gauche;
    ExpressionA droite;
    ExpressionA res;
}
{ (gauche=terme() {res=gauche;}
    ("+" (droite=terme()) {gauche=new Plus(gauche, droite); res=gauche;}
    | "-" (droite=terme()) {gauche=new Moins(gauche, droite); res=gauche;}
    | <EGALITE> (droite=terme()) {gauche=new Egalite(gauche, droite); res=gauche;}
    | <PPETITOUE> (droite=terme()) {gauche=new PPetitE(gauche, droite); res=gauche;}
    | <PGRANDOUE> (droite=terme()) {gauche=new PGrandE(gauche, droite); res=gauche;}
    | <DIFFERENT> (droite=terme()) {gauche=new NotEq(gauche, droite); res=gauche;}
    | "<" (droite=terme()) {gauche=new PPetit(gauche, droite); res=gauche;}
    | ">" (droite=terme()) {gauche=new PGrand(gauche, droite); res=gauche;}
    | <ET> (droite=terme()) {gauche=new Et(gauche, droite); res=gauche;}
    )* {return res;})
}

ExpressionA terme () :
{
    ExpressionA gauche;
    ExpressionA droite;
    ExpressionA res;
}
{ gauche=facteur() {res=gauche;}
    ("*" (droite=facteur()) {gauche=new Mult(gauche, droite); res=gauche;}
    |"/" (droite=facteur()) {gauche=new Div(gauche, droite); res=gauche;}
    )* {return res;}
}

ExpressionA facteur () :
{
    ExpressionA e;
    Token t;
}
{ "(" (e=expression()) ")" {return e;}
    | "-" (e=facteur()) {return new Neg(e);}
    | "!" (e=facteur()) {return new Nega(e);}
    | t=<NOMBRE> {return new Num(Float.parseFloat(t.image));}
    | t=<NOMBRESCI> {return new Num(Float.parseFloat(t.image));}
    | t=<NAN>  {return new Num(Float.parseFloat(t.image));}
    | t=<BOOLEAN> {return new Bool(Boolean.parseBoolean(t.image));}
    | (t=<IDENTIFIANT>) "(" (e=argument()) ")" {return new CallFonction(t.image, e);}
}

ExpressionA argument () :
{
    Argument arg = new Argument();
    ExpressionA e1;
    ExpressionA e2;
}
{
    ( (e1=expression()) {arg.add(e1);}
    ( "," (e2=expression()) {arg.add(e2);}
    )* )? {return arg;}
}